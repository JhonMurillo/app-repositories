# HTTP Server
server:
  port: 0   # HTTP port

# Discovery Server Access
eureka:
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://localhost:1111/eureka/
      
spring:
    profiles:
         active: native
    datasource:
         url: jdbc:mysql://localhost/app
         username: root
         password: 
#         password: root
         driver-class-name: com.mysql.jdbc.Driver
#         username: sa
#         password: RootZabudYiin2016
#         Keep the connection alive if idle for a long time (needed in production)
#         time-between-eviction-runs-millis: 60000
#         test-while-idle: true
         test-on-borrow: true
         validation-query: SELECT 1

#logging:
#  file: logs/${spring.application.name}.log
#  level:
#    com.netflix.discovery: 'OFF'
#    org.springframework.cloud: 'DEBUG'
#    com.atsistemas: 'DEBUG'

# ==========================================================================
# = JPA / HIBERNATE
# ==========================================================================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
    jpa:
        show-sql: true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
        hibernate:
            ddl-auto: update   
            
# Naming strategy
            naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS for MySQL:MySQL5Dialect - SQLserver:SQLServerDialect
        properties:
            hibernate:
                dialect: org.hibernate.dialect.MySQLDialect
                
                temp: 
                  use_jdbc_metadata_defaults: false